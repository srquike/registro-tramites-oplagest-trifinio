@page "/"

@inject NavigationManager Navigation
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<div class="p-4">
    <PageTitle>Tablero :: OPLAGEST-Trifinio</PageTitle>
    <h1>Tablero</h1>
    @if (Tramites == null)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="50" />
            <p class="m-0">Cargando resumen de tr&aacute;mites</p>
        </div>
    }
    else if (Tramites.Count == 0)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="50" />
            <p class="m-0">No hay tr&aacute;mites disponibles</p>
        </div>
    }
    else
    {
        <h4>Resumen de tr&aacute;mites</h4>
        <ConteoTramites Tramites="Tramites" />
    }
    <AuthorizeView>
        <Authorized>
            @if (context.User.IsInRole("Administrador"))
            {
                @if (Visitas == null)
                {
                    <div class="d-flex align-items-center">
                        <img src="images/progress.gif" width="50" />
                        <p class="m-0">Cargando resumen de visitas</p>
                    </div>
                }
                else if (Visitas.Count == 0)
                {
                    <div class="d-flex align-items-center">
                        <img src="images/progress.gif" width="50" />
                        <p class="m-0">No hay visitas disponibles</p>
                    </div>
                }
                else
                {
                    <h4 class="mt-4">Resumen de visitas</h4>
                    <ResumenVisitas Visitas="Visitas" />
                }

                @if (Usuarios == null)
                {
                    <div class="d-flex align-items-center">
                        <img src="images/progress.gif" width="50" />
                        <p class="m-0">Cargando resumen de usuarios</p>
                    </div>
                }
                else if (Usuarios.Count == 0)
                {
                    <div class="d-flex align-items-center">
                        <img src="images/progress.gif" width="50" />
                        <p class="m-0">No hay usuarios disponibles</p>
                    </div>
                }
                else
                {
                    <h4 class="mt-4">Resumen de usuarios</h4>
                    <ResumenUsuarios Usuarios="Usuarios" />
                }
            }
        </Authorized>
    </AuthorizeView>
</div>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? Aauthentication { get; set; }

    private List<TramiteListaDTO>? Tramites { get; set; }
    private List<UsuarioListaDTO>? Usuarios { get; set; }
    private List<VisitaDTO>? Visitas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var estadoAutenticacion = await Aauthentication;
        var usuario = estadoAutenticacion.User;

        if (!usuario.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("ingresar");
        }
        else
        {
            await ObtenerTramites();
            await ObtenerUsuarios();
            await ObtenerVisitas();
        }
    }

    private async Task ObtenerTramites()
    {
        try
        {
            var peticion = await Http.Get<List<TramiteListaDTO>>("api/tramites/resumen");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Tramites = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
    
    private async Task ObtenerUsuarios()
    {
        try
        {
            var peticion = await Http.Get<List<UsuarioListaDTO>>("api/cuentas");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Usuarios = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
    
    private async Task ObtenerVisitas()
    {
        try
        {
            var peticion = await Http.Get<List<VisitaDTO>>("api/visitas");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Visitas = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}
