@page "/tramites/visitados/revisar/{TramiteId:int}"

@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation
@inject IGeneraRegistroActividad Registro

@attribute [Authorize]

<div class="p-4">

    <h1 class="mb-4">Revisi&oacute;n de tr&aacute;mite visitado</h1>

    <BSButtonGroup Class="mb-4">
        <BSButton OnClick="EnviarAFirmar" Color="BSColor.Primary" IsOutlined="true">Enviar tr&aacute;mite a firmar</BSButton>
        <BSButton Target="DevolverModal" Color="BSColor.Primary" IsOutlined="true">Devolver</BSButton>
        <a href="/tramites/editar/@TramiteId" class="btn btn-outline-primary">Editar</a>
        <BSButton OnClick="Archivar" Color="BSColor.Danger" IsOutlined="true">Archivar tr&aacute;mite</BSButton>
    </BSButtonGroup>

    <VerTramite Tramite="Tramite" @key="Tramite.TramiteId">
        <Informacion>
            <h4>Datos de la visita t&eacute;cnica</h4>
            <ListaVisitas Visitas="Tramite.Visitas" />
        </Informacion>
    </VerTramite>

    <BSModal IsCentered="true" DataId="DevolverModal">
        <DevolverTramite Devolucion="Devolucion" OnValidSubmit="Devolver" />
    </BSModal>

</div>

@code 
{
    [Parameter]
    public int? TramiteId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    private TramiteDTO Tramite { get; set; } = new();
    private DevolucionDTO Devolucion { get; set; } = new();
    private string _responsableEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var peticion = await Http.Get<TramiteDTO>($"api/tramites/{TramiteId}");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                var autenticacion = await Authentication;
                var usuario = autenticacion.User;

                _responsableEmail = usuario.FindFirst(ClaimTypes.Email).Value;
                Tramite = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Devolver()
    {
        try
        {
            Devolucion.TramiteId = Tramite.TramiteId;

            var peticion = await Http.Post<DevolucionDTO>($"api/tramites/devolver", Devolucion);

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible devolver el trámite");
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista de devueltos");
                await Mensaje.Completado("El trámite fue devuelto con éxito");
                Navigation.NavigateTo("tramites/devueltos");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task EnviarAFirmar()
    {
        try
        {
            var peticion = await Http.Post<int?>($"api/tramites/firmar", TramiteId);

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible enviar el trámite a firmar");
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista para firmar");
                await Mensaje.Completado("El trámite fue enviado a firmar con éxito");
                Navigation.NavigateTo("tramites/para-firmar");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Archivar()
    {
        try
        {
            var archivar = new ArchivarDTO();

            archivar.TramiteId = TramiteId;
            archivar.ArchivadoDesde = "Visitados";
            archivar.Estado = "Archivado";

            if (await Mensaje.Confirmar($"Archivar trámite"))
            {
                var respuesta = await Http.Post<ArchivarDTO>("api/tramites/archivar", archivar);

                if (respuesta.Error)
                {
                    await Mensaje.Error(await respuesta.ObtenerMensaje());
                }
                else
                {
                    await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista de archivados");
                    await Mensaje.Completado("El trámite fue archivado con éxito");
                    Navigation.NavigateTo("tramites/archivados");
                }
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}
