@page "/tramites/devueltos/revisar/{TramiteId:int}"

@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation
@inject IGeneraRegistroActividad Registro

@attribute [Authorize]

<div class="p-4">
    <h1 class="mb-4">Revisi&oacute;n de tr&aacute;mite devuelto</h1>

    @if (Tramite == null)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="35" />
            <p class="m-0">Cargando datos del tr&aacute;mite...</p>
        </div>
    }
    else if (Tramite.TramiteId != 0)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="35" />
            <p class="m-0">No hay datos disponibles para mostrar</p>
        </div>
    }
    else
    {
        <AuthorizeView>
            <BSButtonGroup class="mb-4">
                @if (!context.User.IsInRole("Administrador"))
                {
                    <BSButton OnClick="ContinuarProceso" Color="BSColor.Primary" IsOutlined="true">Continuar proceso</BSButton>
                    <a href="/tramites/editar/@TramiteId?Redireccion=/tramites/devueltos/revisar/@TramiteId" class="btn btn-outline-primary">Editar</a>
                    <BSButton Target="AdministrarArchivos" Color="BSColor.Primary" IsOutlined="true">Administrar archivos</BSButton>
                    <BSButton OnClick="Archivar" Color="BSColor.Danger" IsOutlined="true">Archivar tr&aacute;mite</BSButton>
                }
            </BSButtonGroup>
        </AuthorizeView>

        <VerTramite Tramite="Tramite">
            <Informacion>
                <h4>Datos de la devoluci&oacute;n</h4>
                <ListaDevoluciones Devoluciones="Devoluciones" />
            </Informacion>
        </VerTramite>

        <BSModal Size="Size.ExtraLarge" IsCentered="true" HideOnValidSubmit="true" DataId="AdministrarArchivos">
            <BSModalHeader>Administrar archivos del trámite</BSModalHeader>
            <BSModalContent>
                <AdministrarArchivos Expediente="@Tramite.Expediente" />
            </BSModalContent>
            <BSModalFooter>
                <p><i>*El tamaño máximo de cada archivo es de 15 MB.</i></p>
            </BSModalFooter>
        </BSModal>
    }
</div>

@code
{
    [Parameter]
    public int? TramiteId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    private List<DevolucionDTO> Devoluciones { get; set; } = new();
    private TramiteDTO? Tramite { get; set; }
    private DevolucionDTO? Devolucion { get; set; }
    private string _responsableEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Tramite = new()
            {
                ArchivadoDesde = string.Empty,
                CorreoElectronico = string.Empty,
                Encargado = "Encargado",
                EncargadoTelefono = string.Empty,
                Expediente = "EXP-DEMO-1",
                FechaEgreso = DateTime.UtcNow.ToShortDateString(),
                FechaIngreso = DateTime.UtcNow.ToShortDateString(),
                InmuebleDireccion = "Santa Ana",
                Instructivo = "Instructivo DEMO 1",
                MontoPagado = "42.2",
                Propietario = "Propietario",
                PropietarioDireccion = "Santa Ana",
                PropietarioTelefono = string.Empty,
                Proyecto = "Proyecto DEMO 1",
                Receptor = "Receptor",
                TramiteId = 0,
                Visitas = new List<VisitaDTO>()
                    {
                        new VisitaDTO()
                        {
                    Comentarios = string.Empty,
                    Encargado = "Encargado",
                    Estado = "Activa",
                    Fecha = DateOnly.FromDateTime(DateTime.UtcNow),
                    Hora = TimeOnly.FromDateTime(DateTime.UtcNow),
                    TramiteExpediente = string.Empty,
                    TramiteId = 0,
                    VisitaId = 0

                        }
                 }
            };
    }

    protected override async Task OnParametersSetAsync()
    {
        await ObtenerDevoluciones(TramiteId.Value);
    }

    private async Task Archivar()
    {
        await Mensaje.Completado("El trámite fue archivado con éxito");
        Navigation.NavigateTo("tramites/archivados");
    }

    private async Task ContinuarProceso()
    {
        await Mensaje.Completado("El proceso del trámite continuará en la etapa de donde fue devuelto");
        Navigation.NavigateTo(Devolucion.Etapa switch
        {
            "Para visitar" => "tramites/para-visitar",
            "Para entregar" => "tramites/para-entregar",
            "Finalizados" => "tramites/finalizados",
            "Para firmar" => "tramites/para-firmar",
            "Nuevos" => "tramites/en-recepcion",
            "Visitados" => "tramites/visita-completada",
            _ => "tramites/devueltos"
        });
    }

    private async Task ObtenerDevoluciones(int tramiteId)
    {
        Devolucion = new()
            {
                Comentarios = "Comentarios",
                CorreoElectronicoResponsable = string.Empty,
                DevolucionId = 0,
                Etapa = "Nuevos",
                Fecha = DateOnly.FromDateTime(DateTime.UtcNow),
                Motivo = "Subsanacion",
                TramiteId = 0
            };
    }

    private async Task NotificarCorrecciones()
    {
        await Mensaje.Completado("La notificación de correcciones fue enviada con éxito");
    }
}