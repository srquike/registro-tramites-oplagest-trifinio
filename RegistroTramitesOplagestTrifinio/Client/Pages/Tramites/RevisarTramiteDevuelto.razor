@page "/tramites/devueltos/revisar/{TramiteId:int}"

@using RegistroTramitesOplagestTrifinio.Client.Shared.Devoluciones

@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation

<div class="p-4">
    <h1 class="mb-4">Revisi&oacute;n de tr&aacute;mite devuelto</h1>

    @if (Tramite == null)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="50" />
            <p class="m-0">Cargando datos del tr&aacute;mite...</p>
        </div>
    }
    else if (Tramite.TramiteId == 0)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="50" />
            <p class="m-0">No hay datos disponibles para mostrar</p>
        </div>
    }
    else
    {
        <BSButtonGroup class="mb-4">
            <BSButton OnClick="ContinuarProceso" Color="BSColor.Primary" IsOutlined="true">Continuar proceso</BSButton>
            <a href="/tramites/editar/@TramiteId" class="btn btn-outline-primary">Editar</a>
            <BSButton OnClick="Archivar" Color="BSColor.Danger" IsOutlined="true">Archivar tr&aacute;mite</BSButton>
        </BSButtonGroup>

        <VerTramite Tramite="Tramite">
            <Informacion>
                <h4>Datos de la devoluci&oacute;n</h4>
                <ListaDevoluciones Devoluciones="Devoluciones" />
            </Informacion>
        </VerTramite>
    }
</div>

@code
{
    [Parameter]
    public int? TramiteId { get; set; }

    private List<DevolucionDTO> Devoluciones { get; set; } = new();

    private TramiteDTO? Tramite { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var peticion = await Http.Get<TramiteDTO>($"api/tramites/editar/{TramiteId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener los datos del trámite");
            }
            else
            {
                Tramite = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await ObtenerDevoluciones(TramiteId.Value);
    }

    private async Task Archivar()
    {
        try
        {
            var archivar = new ArchivarDTO();

            archivar.TramiteId = TramiteId;
            archivar.ArchivadoDesde = "Devueltos";
            archivar.Estado = "Archivado";

            if (await Mensaje.Confirmar($"Archivar trámite"))
            {
                var respuesta = await Http.Post<ArchivarDTO>("api/tramites/archivar", archivar);

                if (respuesta.Error)
                {
                    await Mensaje.Error(await respuesta.ObtenerMensaje());
                }
                else
                {
                    await Mensaje.Completado("El trámite fue archivado con éxito");
                    Navigation.NavigateTo("tramites/archivados");
                }
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ContinuarProceso()
    {

    }

    private async Task ObtenerDevoluciones(int tramiteId)
    {
        try
        {
            var peticion = await Http.Get<List<DevolucionDTO>>($"api/tramites/devoluciones/{TramiteId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de devoluciones");
            }
            else
            {
                Devoluciones = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}