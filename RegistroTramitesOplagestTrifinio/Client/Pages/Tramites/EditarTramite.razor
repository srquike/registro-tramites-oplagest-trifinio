@page "/tramites/editar/{TramiteId:int}"

@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation
@inject IGeneraRegistroActividad Registro

@attribute [Authorize]

<div class="p-4">
    <h1 class="mb-4">Modificar datos del tr&aacute;mite</h1>

    @if (Tramite is null)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="35" />
            <p class="m-0">Cargando datos del tr&aacute;mite, por favor espere...</p>
        </div>
    }
    else if (Tramite.TramiteId is 0)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="35" />
            <p class="m-0">No hay datos disponibles para mostrar</p>
        </div>
    }
    else
    {
        <FormularioTramite Tramite="Tramite" OnValidSubmit="Editar">
            <Opciones>
                <BSButton IsSubmit="true" Color="BSColor.Success" IsOutlined="true">Guardar cambios</BSButton>
            </Opciones>
        </FormularioTramite>

        <RequisitosCheckBoxes Requisitos="TramitesRequisitos" />
    }
</div>

@code 
{
    [Parameter]
    public int? TramiteId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Redireccion { get; set; }

    private FormularioTramiteDTO? Tramite { get; set; }
    private List<TramiteRequisitoDTO>? TramitesRequisitos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var peticion = await Http.Get<FormularioTramiteDTO>($"api/tramites/editar/{TramiteId}");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Tramite = peticion.Respuesta;

                await ObtenerRequisitos(Tramite.TramiteId);

                Console.WriteLine(Redireccion);
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerRequisitos(int tramiteId)
    {
        try
        {
            var peticion = await Http.Get<List<TramiteRequisitoDTO>>($"api/tramites/requisitos/{tramiteId}");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                TramitesRequisitos = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task EditarRequisitos()
    {
        try
        {
            var peticion = await Http.Put<List<TramiteRequisitoDTO>>("api/tramites/requisitos/editar", TramitesRequisitos);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Editar()
    {
        try
        {
            var peticion = await Http.Put<FormularioTramiteDTO>("api/tramites/editar", Tramite);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                await EditarRequisitos();
                await Mensaje.Completado("Los datos del trámite fuerón modificados con éxito");
                Navigation.NavigateTo(Redireccion);
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}
