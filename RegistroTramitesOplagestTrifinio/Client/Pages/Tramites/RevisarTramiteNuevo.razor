@page "/tramites/nuevos/revisar/{TramiteId:int}"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation
@inject IGeneraRegistroActividad Registro
@attribute [Authorize(Roles = "Administrador")]

<div class="p-4">
    <h1 class="mb-4">Revisi&oacute;n de tr&aacute;mite en recepci&oacute;n</h1>

    <BSButtonGroup Class="mb-4">
        <BSButton Target="AgendarModal" Color="BSColor.Primary" IsOutlined="true">Agendar visita t&eacute;cnica</BSButton>
        <BSButton Target="DevolverModal" Color="BSColor.Primary" IsOutlined="true">Devolver</BSButton>
        <a href="/tramites/editar/@TramiteId?Redireccion=/tramites/nuevos/revisar/@TramiteId" class="btn btn-outline-primary">Editar</a>
        <BSButton OnClick="Archivar" Color="BSColor.Danger" IsOutlined="true">Archivar tr&aacute;mite</BSButton>
    </BSButtonGroup>

    <VerTramite Tramite="Tramite" @key="Tramite.TramiteId" />

    <BSModal IsCentered="true" HideOnValidSubmit="true" DataId="AgendarModal">
        <AgendarCita Visita="Visita" OnValidSubmit="Agendar" />
    </BSModal>

    <BSModal IsCentered="true" HideOnValidSubmit="true" DataId="DevolverModal">
        <DevolverTramite Devolucion="Devolucion" OnValidSubmit="Devolver" />
    </BSModal>
</div>

@code
{
    [Parameter]
    public int? TramiteId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    public TramiteDTO Tramite { get; set; } = new();
    public DevolucionDTO Devolucion { get; set; } = new();

    private VisitaDTO Visita { get; set; } = new();
    private string _responsableEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var peticion = await Http.Get<TramiteDTO>($"api/tramites/{TramiteId}");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                var autenticacion = await Authentication;
                var usuario = autenticacion.User;

                _responsableEmail = usuario.FindFirst(ClaimTypes.Email).Value;
                Tramite = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Agendar()
    {
        try
        {
            Visita.TramiteId = TramiteId;
            Visita.Estado = "Sin realizar";

            var peticion = await Http.Post<VisitaDTO>($"api/tramites/agendar", Visita);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista para visitar");
                await Mensaje.Completado("Visita técnica agendada con éxito");
                Navigation.NavigateTo("tramites/para-visitar");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Devolver()
    {
        try
        {
            Devolucion.TramiteId = TramiteId;
            Devolucion.CorreoElectronicoResponsable = _responsableEmail;

            var peticion = await Http.Post<DevolucionDTO>($"api/tramites/devolver", Devolucion);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista de devueltos");
                await Mensaje.Completado("El trámite fue devuelto con éxito");
                Navigation.NavigateTo("tramites/devueltos");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Archivar()
    {
        try
        {
            var archivar = new ArchivarDTO();

            archivar.TramiteId = TramiteId;
            archivar.ArchivadoDesde = "Nuevos";
            archivar.Estado = "Archivado";

            if (await Mensaje.Confirmar($"Archivar trámite"))
            {
                var respuesta = await Http.Post<ArchivarDTO>("api/tramites/archivar", archivar);

                if (respuesta.Error)
                {
                    await Mensaje.Error(await respuesta.ObtenerMensaje());
                }
                else
                {
                    await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista de archivados");
                    await Mensaje.Completado("El trámite fue archivado con éxito");
                    Navigation.NavigateTo("tramites/archivados");
                }
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task EnviarCorreoElectronico(int tramiteId)
    {
        try
        {
            var peticion = await Http.Post<int>("api/tramites/devueltos/email", tramiteId);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}