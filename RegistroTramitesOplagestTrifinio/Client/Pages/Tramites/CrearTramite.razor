@page "/tramites/crear"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation

<div class="p-4">
    <PageTitle>Iniciar tr&aacute;mite :: OPLAGEST-Trifinio</PageTitle>
    <h1 class="mb-4">Iniciar tr&aacute;mite</h1>

    <FormularioTramite Tramite="Tramite" OnValidSubmit="Crear">
        <Opciones>            
            <BSButton IsSubmit="true" Class="btn btn-outline-primary">Iniciar</BSButton>
        </Opciones>
        <Extras>
            <SeleccionarInstructivo EventCallback="ObtenerRequisitos" Instructivos="Instructivos" Tramite="Tramite" />
        </Extras>
    </FormularioTramite>

    <RequisitosCheckBoxes Requisitos="Tramite.TramitesRequisitos" @key="Tramite.Instructivo.InstructivoId" />
</div>

@code
{
    public FormularioTramiteDTO Tramite { get; set; } = new();
    private List<InstructivoDTO>? Instructivos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var peticion = await Http.Get<List<InstructivoDTO>>("api/instructivos");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de instructivos");
            }
            else
            {
                Instructivos = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrió un error inesperado");
        }
    }

    private async Task ObtenerRequisitos(int? instructivoId)
    {
        try
        {
            var peticion = await Http.Get<List<RequisitoDTO>>($"api/instructivos/requisitos/{instructivoId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener el listado de requisitos");
            }
            else
            {
                Tramite.TramitesRequisitos = peticion.Respuesta.Select(x => new TramiteRequisitoDTO
                    {
                        Entregado = false,
                        Nombre = x.Nombre,
                        RequistoId = x.RequesitoId,
                        Categoria = x.Categoria,

                    }).ToList();
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrió un error inesperado");
        }
    }

    public async Task Crear()
    {
        try
        {
            var respuesta = await Http.Post<FormularioTramiteDTO>("api/tramites", Tramite);

            if (respuesta.Error)
            {
                await Mensaje.Error("No fue posible crear el trámite");
            }
            else
            {
                await Mensaje.Completado("El trámite fue creado con éxito");
                Navigation.NavigateTo("tramites/nuevos");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrió un error inesperado");
        }
    }
}