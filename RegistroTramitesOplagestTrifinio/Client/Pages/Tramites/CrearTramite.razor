@page "/tramites/crear"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation
@inject IGeneraRegistroActividad Registro
@attribute [Authorize]

<div class="p-4">
    <PageTitle>Iniciar tr&aacute;mite :: OPLAGEST-Trifinio</PageTitle>
    <h1 class="mb-4">Recepcionar tr&aacute;mite</h1>

    <FormularioTramite Tramite="Tramite" OnValidSubmit="Crear">
        <Opciones>
            <BSButton IsSubmit="true" Class="btn btn-info ">Iniciar</BSButton>
        </Opciones>
        <Extras>
            <SeleccionarInstructivo EventCallback="ObtenerRequisitos" Instructivos="Instructivos" Tramite="Tramite" />
        </Extras>
    </FormularioTramite>

    <RequisitosCheckBoxes Requisitos="TramitesRequisitos" />
</div>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private FormularioTramiteDTO Tramite { get; set; } = new();
    private List<InstructivoDTO>? Instructivos { get; set; }
    private List<TramiteRequisitoDTO>? TramitesRequisitos { get; set; }
    private string _receptor = string.Empty;
    private string _receptorEmail = string.Empty;
    private int _tramiteId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var peticion = await Http.Get<List<InstructivoDTO>>("api/instructivos");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de instructivos");
            }
            else
            {
                Instructivos = peticion.Respuesta;
                var authentication = await AuthenticationState;
                _receptor = authentication.User.FindFirst(ClaimTypes.Name).Value;
                _receptorEmail = authentication.User.FindFirst(ClaimTypes.Email).Value;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrió un error inesperado");
        }
    }

    private async Task ObtenerRequisitos(int? instructivoId)
    {
        try
        {
            var peticion = await Http.Get<List<RequisitoDTO>>($"api/instructivos/requisitos/{instructivoId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener el listado de requisitos");
            }
            else
            {
                var requisitos = peticion.Respuesta.Select(x => new TramiteRequisitoDTO
                    {
                        Entregado = false,
                        TramiteId = Tramite.TramiteId,
                        RequisitoId = x.RequisitoId,
                        Nombre = x.Nombre
                    }).ToList();

                TramitesRequisitos = requisitos;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrió un error inesperado");
        }
    }

    public async Task Crear()
    {
        try
        {
            Tramite.Receptor = _receptor;
            Tramite.CorreoElectronicoReceptor = _receptorEmail;

            var peticion = await Http.Post<FormularioTramiteDTO, int>("api/tramites", Tramite);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                _tramiteId = peticion.Respuesta;

                if (await CrearRequisitos(_tramiteId))
                {
                    await EnviarCorreoElectronico(_tramiteId);
                    await Registro.Generar(_receptorEmail, "Agregó un nuevo trámite a recepción");
                    await Mensaje.Completado("El trámite fue creado con éxito");
                    Navigation.NavigateTo("tramites/en-recepcion");
                };
            }
        }
        catch (Exception ex)
        {
            await Mensaje.Error(ex.Message);
        }
    }

    private async Task EnviarCorreoElectronico(int tramiteId)
    {
        try
        {
            var peticion = await Http.Post<int>("api/tramites/email", tramiteId);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task<bool> CrearRequisitos(int tramiteId)
    {
        try
        {
            TramitesRequisitos.ForEach(r => r.TramiteId = tramiteId);

            var peticion = await Http.Post<List<TramiteRequisitoDTO>>("api/tramites/requisitos", TramitesRequisitos);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
                return false;
            }

            return true;
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
            return false;
        }
    }
}