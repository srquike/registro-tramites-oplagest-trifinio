@page "/tramites/crear"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation
@inject IGeneraRegistroActividad Registro
@attribute [Authorize]

<div class="p-4">
    <h1 class="mb-4">Recepcionar tr&aacute;mite</h1>

    <FormularioTramite Tramite="Tramite" OnValidSubmit="Crear">
        <Opciones>
            <BSButton IsSubmit="true" Color="BSColor.Primary" IsOutlined="true">Recepcionar tr&aacute;mite</BSButton>
        </Opciones>
        <Extras>
            <SeleccionarInstructivo EventCallback="ObtenerRequisitos" Instructivos="Instructivos" Tramite="Tramite" />
        </Extras>
    </FormularioTramite>

    <RequisitosCheckBoxes Requisitos="TramitesRequisitos" />
</div>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private FormularioTramiteDTO Tramite { get; set; } = new();
    private List<InstructivoDTO>? Instructivos { get; set; }
    private List<TramiteRequisitoDTO>? TramitesRequisitos { get; set; }
    private string _receptor = string.Empty;
    private string _receptorEmail = string.Empty;
    private int _tramiteId = 0;

    protected override async Task OnInitializedAsync()
    {
        Instructivos = new();
        Instructivos.Add(new InstructivoDTO()
            {
                InstructivoId = 0,
                Nombre = "Instructivo DEMO 1"
            });
    }

    private async Task ObtenerRequisitos(int? instructivoId)
    {
        TramitesRequisitos = new();
        TramitesRequisitos.Add(new TramiteRequisitoDTO()
            {
                Entregado = true,
                Nombre = "Requisito DEMO 1",
                RequisitoId = 0,
                TramiteId = 0,
                TramiteRequisitoId = 0
            });
    }

    public async Task Crear()
    {
        await Mensaje.Completado("El trámite fue creado con éxito");
        Navigation.NavigateTo("/tramites/en-recepcion");
    }
}