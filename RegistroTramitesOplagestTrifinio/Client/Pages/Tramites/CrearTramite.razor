@page "/tramites/crear"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation

<h1 class="display-4">Nuevo tr&aacute;mite</h1>

<div class="form-group mb-3">
    <label for="instructivos" class="form-label">Nombre del tr&aacute;mite</label>
    <InputSelect ValueChanged="@((string value) => ObtenerRequisitos(value))" ValueExpression="@(() => _instructivoSeleccionado)" Value="_instructivoSeleccionado" id="instructivos" class="form-select">
        @foreach (var item in Instructivos)
        {
            <option value="@item.InstructivoId">@item.Nombre</option>
        }
    </InputSelect>
</div>

<FormularioTramite Tramite="Tramite" OnValidSubmit="Crear"/>

<RequisitosCheckBoxes Requisitos="Requisitos" />


@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    public TramiteDTO Tramite { get; set; } = new();

    private List<InstructivoDTO> Instructivos { get; set; } = new();
    private string? _instructivoSeleccionado { get; set; }
    public List<TramiteRequisitoDTO> Requisitos { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var respuesta = await Http.Get<List<InstructivoDTO>>("api/instructivos");

        if (respuesta.Error)
        {
            await Mensaje.Error(await respuesta.ObtenerMensaje());
        }
        else
        {
            Instructivos = respuesta.Respuesta;
        }
    }

    private void ObtenerRequisitos(string instructivoId)
    {
        _instructivoSeleccionado = instructivoId;

        Requisitos = Instructivos.Find(x => x.InstructivoId == int.Parse(instructivoId))!.Requisitos.Select(x => new TramiteRequisitoDTO()
            {
                Nombre = x.Nombre,
                RequistoId = x.RequesitoId,
                Entregado = false,
                Categoria = x.Categoria

            }).OrderBy(r => r.Categoria).ToList();
    }

    public async Task Crear()
    {
        var autenticacion = await AuthenticationState!;
        var usuario = autenticacion.User;

        Tramite.TramitesRequisitos = Requisitos;
        Tramite.InstructivoId = int.Parse(_instructivoSeleccionado);
        Tramite.Estado = "Nuevo";
        Tramite.Receptor = usuario.Identity!.Name;

        var respuesta = await Http.Post<TramiteDTO>("api/tramites", Tramite);

        if (respuesta.Error)
        {
            await Mensaje.Error(await respuesta.ObtenerMensaje());
        }
        else
        {
            await Mensaje.Completado("El trámite fue creado con éxito");
            Navigation.NavigateTo("tramites/nuevos");
        }
    }
}