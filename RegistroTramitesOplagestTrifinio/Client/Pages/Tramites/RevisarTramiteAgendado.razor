@page "/tramites/agendados/revisar/{TramiteId:int}"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation

<div class="p-4">
    <div class="mb-4">
        <BSButton Target="CompletarVisitaModal" Color="BSColor.Primary">Completar visita t&eacute;cnica</BSButton>
        <BSButton Target="CompletarVisitaModal" OnClick="EnviarFirmar" Color="BSColor.Secondary">Enviar a firmar</BSButton>
        <BSButton Target="DevolverModal" Color="BSColor.Danger">Devolver</BSButton>
    </div>

    <FormularioTramite Tramite="Tramite" OnValidSubmit="Editar" />

    <RequisitosCheckBoxes Requisitos="Requisitos" />

    <BSModal IsCentered="true" DataId="DevolverModal">
        <DevolverTramite Devolucion="Devolucion" OnValidSubmit="Devolver" />
    </BSModal>
    
    <BSModal IsCentered="true" DataId="CompletarVisitaModal">
        <CompletarVisitaTecnica VisitaId="VisitaId" />
    </BSModal>
</div>

@code {
    [Parameter] public int? TramiteId { get; set; }
    public FormularioTramiteDTO Tramite { get; set; } = new();
    public List<TramiteRequisitoDTO> Requisitos { get; set; } = new();
    public DevolucionDTO Devolucion { get; set; } = new();
    public int? VisitaId { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var peticion = await Http.Get<FormularioTramiteDTO>($"api/tramites/{TramiteId}");

        if (peticion.Error)
        {
            await Mensaje.Error(await peticion.ObtenerMensaje());
        }
        else
        {
            Tramite = peticion.Respuesta;
            Requisitos = Tramite.TramitesRequisitos.Select(x => new TramiteRequisitoDTO()
                {
                    Nombre = x.Nombre,
                    RequistoId = x.RequistoId,
                    Entregado = x.Entregado,
                    Categoria = x.Categoria

                }).OrderBy(r => r.Categoria).ToList();
            VisitaId = Tramite.Visitas.FirstOrDefault().VisitaId;
        }
    }
    private async Task Editar()
    {
        Tramite.TramitesRequisitos = Requisitos;

        var peticion = await Http.Put<FormularioTramiteDTO>($"api/tramites/{Tramite.TramiteId}", Tramite);

        if (peticion.Error)
        {
            await Mensaje.Error(await peticion.ObtenerMensaje());
        }
        else
        {
            await Mensaje.Completado("Trámite modificado con éxito");
            Navigation.NavigateTo("tramites/agendados");
        }
    }
    private async Task Devolver()
    {
        Devolucion.TramiteId = Tramite.TramiteId;

        var peticion = await Http.Post<DevolucionDTO>($"api/tramites/devolver", Devolucion);

        if (peticion.Error)
        {
            await Mensaje.Error(await peticion.ObtenerMensaje());
        }
        else
        {
            await Mensaje.Completado("El trámite fue devuelto con éxito");
            Navigation.NavigateTo("tramites/devueltos");
        }
    }
    private async Task EnviarFirmar()
    {
        Tramite.Estado = "Por firmar";

        var peticion = await Http.Put<FormularioTramiteDTO>($"api/tramites/{Tramite.TramiteId}", Tramite);

        if (peticion.Error)
        {
            await Mensaje.Error(await peticion.ObtenerMensaje());
        }
        else
        {
            await Mensaje.Completado("Trámite para firmar enviado con éxito");
            Navigation.NavigateTo("tramites/firmados");
        }
    }
}
