@page "/tramites/agendados/revisar/{TramiteId:int}"

@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject NavigationManager Navigation
@inject IGeneraRegistroActividad Registro

@attribute [Authorize]

<div class="p-4">
    <h1 class="mb-4">Revisi&oacute;n de tr&aacute;mite para visita</h1>
    @if (Tramite == null)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="50" />
            <p class="m-0">Cargando datos del tr&aacute;mite, por favor espere...</p>
        </div>
    }
    else if (Tramite.TramiteId == 0)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="50" />
            <p class="m-0">No hay datos disponibles para el tr&aacute;mite</p>
        </div>
    }
    else
    {
        <AuthorizeView>
            <BSButtonGroup Class="mb-4">
                @if (context.User.IsInRole("Administrador"))
                {
                    <BSButton OnClick="Completar" Color="BSColor.Primary" IsOutlined="true">Completar visita t&eacute;cnica</BSButton>
                    <BSButton Target="DevolverModal" Color="BSColor.Primary" IsOutlined="true">Devolver</BSButton>
                    <a href="/tramites/editar/@TramiteId" class="btn btn-outline-primary">Editar</a>
                    <BSButton Target="AdministrarArchivos" Color="BSColor.Primary" IsOutlined="true">Administrar archivos</BSButton>
                    <BSButton OnClick="Archivar" Color="BSColor.Danger" IsOutlined="true">Archivar tr&aacute;mite</BSButton>
                }
                else if (context.User.IsInRole("Receptor") || context.User.IsInRole("Técnico"))
                {
                    <BSButton OnClick="Completar" Color="BSColor.Primary" IsOutlined="true">Completar visita t&eacute;cnica</BSButton>
                    <a href="/tramites/editar/@TramiteId" class="btn btn-outline-primary">Editar</a>
                    <BSButton Target="AdministrarArchivos" Color="BSColor.Primary" IsOutlined="true">Administrar archivos</BSButton>
                }
            </BSButtonGroup>
        </AuthorizeView>

        <VerTramite Tramite="Tramite" @key="Tramite.TramiteId">
            <Informacion>
                <h4>Datos de la visita t&eacute;cnica</h4>
                <ListaVisitas Visitas="Tramite.Visitas" />
            </Informacion>
        </VerTramite>

        <BSModal IsCentered="true" DataId="DevolverModal">
            <DevolverTramite Devolucion="Devolucion" OnValidSubmit="Devolver" />
        </BSModal>

        <BSModal Size="Size.ExtraLarge" IsCentered="true" HideOnValidSubmit="true" DataId="AdministrarArchivos">
            <BSModalHeader>Administrar archivos del trámite</BSModalHeader>
            <BSModalContent>
                <AdministrarArchivos Expediente="@Tramite.Expediente" />
            </BSModalContent>
            <BSModalFooter>
                <p><i>*El tamaño máximo de cada archivo es de 15 MB.</i></p>
            </BSModalFooter>
        </BSModal>
    }
</div>

@code
{
    [Parameter]
    public int? TramiteId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    public TramiteDTO Tramite { get; set; } = new();
    public DevolucionDTO Devolucion { get; set; } = new();
    public int? VisitaId { get; set; } = new();

    private string _responsableEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var peticion = await Http.Get<TramiteDTO>($"api/tramites/{TramiteId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener los datos del trámite");
            }
            else
            {
                var autenticacion = await Authentication;
                var usuario = autenticacion.User;

                _responsableEmail = usuario.FindFirst(ClaimTypes.Email).Value;
                Tramite = peticion.Respuesta;
                VisitaId = Tramite.Visitas.FirstOrDefault().VisitaId;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Devolver()
    {
        try
        {
            Devolucion.TramiteId = Tramite.TramiteId;
            Devolucion.CorreoElectronicoResponsable = _responsableEmail;

            var peticion = await Http.Post<DevolucionDTO>($"api/tramites/devolver", Devolucion);

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible devolver el trámite");
            }
            else
            {
                await EnviarCorreoElectronico(Devolucion.TramiteId.Value);
                await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista de devueltos");
                await Mensaje.Completado("El trámite fue devuelto con éxito");
                Navigation.NavigateTo("tramites/devueltos");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Completar()
    {
        try
        {
            var peticion = await Http.Put($"api/visitas/completar/{VisitaId}", TramiteId);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista de visita completada");
                await Mensaje.Completado("La visita técnica fue completada con éxito");
                Navigation.NavigateTo("tramites/visita-completada");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Archivar()
    {
        try
        {
            var archivar = new ArchivarDTO();

            archivar.TramiteId = TramiteId;
            archivar.ArchivadoDesde = "Para visitar";
            archivar.Estado = "Archivado";

            if (await Mensaje.Confirmar($"Archivar trámite"))
            {
                var respuesta = await Http.Post<ArchivarDTO>("api/tramites/archivar", archivar);

                if (respuesta.Error)
                {
                    await Mensaje.Error(await respuesta.ObtenerMensaje());
                }
                else
                {
                    await Registro.Generar(_responsableEmail, $"Agregó el trámite con expediente [{Tramite.Expediente}] a la lista de archivados");
                    await Mensaje.Completado("El trámite fue archivado con éxito");
                    Navigation.NavigateTo("tramites/archivados");
                }
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task EnviarCorreoElectronico(int tramiteId)
    {
        try
        {
            var peticion = await Http.Post<int>("api/tramites/devueltos/email", tramiteId);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}