@page "/usuarios"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<h3 class="display-4">Usuarios</h3>
<div class="form-group">
    <a class="btn btn-primary mb-2" href="usuarios/crear">Agregar usuario</a>
</div>

<div class="table-responsive-md">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nombre</th>
                <th scope="col">Correo electr&oacute;nico</th>
                <th scope="col">Estado</th>
                <th scope="col">Fecha de creaci&oacute;n</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in Usuarios)
            {
                <tr>
                    <th scope="row">@(++correlativo)</th>
                    <td>@usuario.Nombre</td>
                    <td>@usuario.CorreoElectronico</td>
                    <td>@(usuario.Activo ? "Activo" : "Inactivo")</td>
                    <td>@usuario.FechaCreacion</td>
                    <td><a href="/usuarios/editar/@usuario.UsuarioId" class="btn btn-info">Editar</a></td>
                    <td><button @onclick="(() => Eliminar(usuario))" class="btn btn-danger">Eliminar</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<UsuarioListaDTO> Usuarios { get; set; } = new List<UsuarioListaDTO>();
    public int correlativo = 0;

    protected async override Task OnInitializedAsync()
    {
        await CargarListado();
    }

    private async Task CargarListado()
    {
        var respuesta = await Http.Get<List<UsuarioListaDTO>>("api/cuentas");
        Usuarios = respuesta.Respuesta;
    }

    private async Task Eliminar(UsuarioListaDTO usuario)
    {
        var respuesta = await Http.Delete<object>($"api/cuentas/{usuario.UsuarioId}");

        if (respuesta.Error)
        {
            await Mensaje.Error(await respuesta.ObtenerMensaje());
        }else
        {
            await CargarListado();
        }
    }

    protected override bool ShouldRender()
    {
        correlativo = 0;
        return base.ShouldRender();
    }
}