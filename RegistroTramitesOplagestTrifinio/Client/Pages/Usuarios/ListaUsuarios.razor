@page "/usuarios"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<div class="p-4">
    <h3 class="display-4">Usuarios</h3>
    <div class="form-group">
        <a class="btn btn-primary mb-2" href="usuarios/crear">Agregar usuario</a>
    </div>

    <div class="table-responsive-sm">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Nombre</th>
                    <th scope="col">Correo electr&oacute;nico</th>
                    <th scope="col">Estado</th>
                    <th scope="col">Fecha de creaci&oacute;n</th>
                    <th scope="col">Opciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var usuario in Usuarios)
                {
                    <tr>
                        <th scope="row">@(++correlativo)</th>
                        <td>@usuario.Nombre</td>
                        <td>@usuario.CorreoElectronico</td>
                        <td>@(usuario.Activo ? "Activo" : "Inactivo")</td>
                        <td>@usuario.FechaCreacion</td>
                        <td>
                            <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                <a href="/usuarios/editar/@usuario.UsuarioId" class="btn btn-info">Editar</a>
                                <button @onclick="(() => Eliminar(usuario))" class="btn btn-danger">Eliminar</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public List<UsuarioListaDTO> Usuarios { get; set; } = new List<UsuarioListaDTO>();
    public int correlativo = 0;

    protected async override Task OnInitializedAsync()
    {
        await CargarListado();
    }

    private async Task CargarListado()
    {
        var respuesta = await Http.Get<List<UsuarioListaDTO>>("api/cuentas");
        Usuarios = respuesta.Respuesta;
    }

    private async Task Eliminar(UsuarioListaDTO usuario)
    {
        if (await Mensaje.Confirmar($"Eliminar usuario {usuario.Nombre.ToUpper()}"))
        {
            var respuesta = await Http.Delete<object>($"api/cuentas/{usuario.UsuarioId}");

            if (respuesta.Error)
            {
                await Mensaje.Error(await respuesta.ObtenerMensaje());
            }
            else
            {
                await CargarListado();
            }
        }
    }

    protected override bool ShouldRender()
    {
        correlativo = 0;
        return base.ShouldRender();
    }
}