@page "/usuarios"
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@attribute [Authorize(Roles = "Administrador")]

<div class="p-4">
    @if (Usuarios.Count == 0)
    {
        <div class="d-flex align-items-center">
            <img src="images/progress.gif" width="50" />
            <p class="m-0">No hay usuarios disponibles</p>
        </div>
    }
    else
    {
        <h1 class="mb-3">Lista de usuarios</h1>

        <BSButtonGroup Class="mb-3">
            <a href="/usuarios/crear" class="btn btn-outline-primary">Agregar usuario</a>
        </BSButtonGroup>

        <div class="table-responsive-sm">
            <table class="table table-hover table-bordered rounded align-middle">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Nombre</th>
                        <th scope="col">Correo electr&oacute;nico</th>
                        <th scope="col">Estado</th>
                        <th scope="col">Rol</th>
                        <th scope="col">Fecha de creaci&oacute;n</th>
                        <th scope="col">Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in Usuarios)
                    {
                        <tr>
                            <th scope="row">@(++correlativo)</th>
                            <td>@usuario.Nombre</td>
                            <td>@usuario.CorreoElectronico</td>
                            <td>@(usuario.Activo ? "Activo" : "Inactivo")</td>
                            <td>@usuario.Rol</td>
                            <td>@usuario.FechaCreacion</td>
                            <td>
                                <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                    <a href="/usuarios/editar/@usuario.UsuarioId" class="btn btn-info ">Editar</a>
                                    <button @onclick="(() => Eliminar(usuario))" class="btn btn-danger">Eliminar</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    public List<UsuarioListaDTO> Usuarios { get; set; } = new();
    public int correlativo = 0;

    protected async override Task OnInitializedAsync()
    {
        await CargarListado();
    }

    private async Task CargarListado()
    {
        try
        {
            var peticion = await Http.Get<List<UsuarioListaDTO>>("api/cuentas");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de usuarios");
            }
            else
            {
                Usuarios = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Eliminar(UsuarioListaDTO usuario)
    {
        try
        {
            if (await Mensaje.Confirmar($"Eliminar usuario {usuario.Nombre.ToUpper()}"))
            {
                var respuesta = await Http.Delete<object>($"api/cuentas/{usuario.UsuarioId}");

                if (respuesta.Error)
                {
                    await Mensaje.Error(await respuesta.ObtenerMensaje());
                }
                else
                {
                    await CargarListado();
                }
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    protected override bool ShouldRender()
    {
        correlativo = 0;
        return base.ShouldRender();
    }
}