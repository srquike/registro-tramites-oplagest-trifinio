@page "/usuarios/editar/{UsuarioId}"

@inject NavigationManager Navigation
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject IGeneraRegistroActividad Registro

@attribute [Authorize]

<div class="p-4">
    @if (Usuario == null)
    {
        <img src="images/progress.gif" width="35" />
    }
    else
    {
        <div class="mb-3">
            <BSButton Target="CambiarClaveModal" Color="BSColor.Primary" IsOutlined="true">Cambiar contrase&ntilde;a</BSButton>
            <BSButton Target="CambiarRolModal" Color="BSColor.Primary" IsOutlined="true">Cambiar rol</BSButton>
        </div>

        <FormularioUsuarios Usuario="Usuario" OnValidSubmit="Editar" />

        <BSModal IsCentered="true" DataId="CambiarClaveModal">
            <CambiarClaveUsuario Usuario="UsuarioCambiarClave" OnValidSubmit="CambiarClave" />
        </BSModal>

        <BSModal IsCentered="true" DataId="CambiarRolModal">
            <CambiarRolUsuario Usuario="UsuarioCambiarRol" OnValidSubmit="CambiarRol" Roles="Roles" />
        </BSModal>
    }
</div>

@code
{
    [Parameter]
    public string? UsuarioId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    private UsuarioFormularioDTO? Usuario { get; set; }

    private UsuarioCambiarClaveDTO? UsuarioCambiarClave { get; set; } = new();
    private UsuarioCambiarRol? UsuarioCambiarRol { get; set; } = new();
    private List<RolDTO> Roles { get; set; } = new();
    private string _responsableEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerUsuario();
        await ObtenerRoles();
        var autenticacion = await Authentication;
        var usuario = autenticacion.User;
    }

    private async Task ObtenerRoles()
    {
        Roles.Add(new RolDTO()
            {
                Nombre = "Invitado",
                RolId = "0"
            });
    }

    private async Task ObtenerUsuario()
    {
        Usuario = new()
            {
                Activo = true,
                Codigo = "1234567890",
                CorreoElectronico = "invitado@jonathanvanegas.com",
                Nombre = "Invitado",
                Rol = "Invitado"
            };
    }

    private async Task Editar()
    {
        await Mensaje.Completado($"Los datos del usuario {Usuario.Nombre.ToUpper()} se actualizarón");
        Navigation.NavigateTo("/usuarios");
    }

    private async Task CambiarClave()
    {
        await Mensaje.Completado("La clave del usuario fue cambiada con éxito");
        Navigation.NavigateTo("/usuarios");
    }

    private async Task CambiarRol()
    {
        await Mensaje.Completado("El rol del usuario fue cambiado con éxito");
        Navigation.NavigateTo("/usuarios");
    }
}