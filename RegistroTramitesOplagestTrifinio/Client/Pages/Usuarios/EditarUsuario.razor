@page "/usuarios/editar/{UsuarioId}"

@inject NavigationManager Navigation
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje
@inject IGeneraRegistroActividad Registro

@attribute [Authorize]

<div class="p-4">
    @if (Usuario == null)
    {
        <img src="images/progress.gif" width="50" />
    }
    else
    {
        <div class="mb-3">
            <BSButton Target="CambiarClaveModal" Color="BSColor.Primary">Cambiar contrase&ntilde;a</BSButton>
            <BSButton Target="CambiarRolModal" Color="BSColor.Primary">Cambiar rol</BSButton>
        </div>

        <FormularioUsuarios Usuario="Usuario" OnValidSubmit="Editar"/>

        <BSModal IsCentered="true" DataId="CambiarClaveModal">
            <CambiarClaveUsuario Usuario="UsuarioCambiarClave" OnValidSubmit="CambiarClave" />
        </BSModal>

        <BSModal IsCentered="true" DataId="CambiarRolModal">
            <CambiarRolUsuario Usuario="UsuarioCambiarRol" OnValidSubmit="CambiarRol" Roles="Roles"/>
        </BSModal>
    }
</div>

@code 
{
    [Parameter] 
    public string? UsuarioId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    private UsuarioFormularioDTO? Usuario { get; set; }

    private UsuarioCambiarClaveDTO? UsuarioCambiarClave { get; set; } = new();
    private UsuarioCambiarRol? UsuarioCambiarRol { get; set; } = new();
    private List<RolDTO> Roles { get; set; } = new();
    private string _responsableEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerUsuario();
        await ObtenerRoles();
        var autenticacion = await Authentication;
        var usuario = autenticacion.User;

        _responsableEmail = usuario.FindFirst(ClaimTypes.Email).Value;
    }

    private async Task ObtenerRoles()
    {
        try
        {
            var peticion = await Http.Get<List<RolDTO>>($"api/cuentas/roles");

            if (peticion.Error)
            {
                await Mensaje.Error("No se pudo obtener la lista de roles");
            }
            else
            {
                Roles = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerUsuario()
    {
        try
        {
            var peticion = await Http.Get<UsuarioFormularioDTO>($"api/cuentas/{UsuarioId}");

            if (peticion.Error)
            {
                if (peticion.Mensaje.StatusCode == HttpStatusCode.NotFound)
                {
                    Navigation.NavigateTo("/usuarios");
                }
                else
                {
                    await Mensaje.Error(await peticion.ObtenerMensaje());
                }
            }
            else
            {
                Usuario = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task Editar()
    {
        try
        {
            var peticion = await Http.Put<UsuarioFormularioDTO>($"api/cuentas/{UsuarioId}", Usuario!);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Editó los datos del usuario con nombre [{Usuario.Nombre}]");
                await Mensaje.Completado($"Los datos del usuario {Usuario.Nombre.ToUpper()} se actualizarón");
                Navigation.NavigateTo("/usuarios");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task CambiarClave()
    {
        try
        {
            UsuarioCambiarClave.UsuarioId = UsuarioId;

            var peticion = await Http.Put<UsuarioCambiarClaveDTO>($"api/cuentas/CambiarClave", UsuarioCambiarClave);

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible cambiar la clave del usuario");
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Cambió la clave del usuario con nombre [{Usuario.Nombre}]");
                await Mensaje.Completado("La clave del usuario fue cambiada con éxito");
                Navigation.NavigateTo("/usuarios");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task CambiarRol()
    {
        try
        {
            UsuarioCambiarRol.UsuarioId = UsuarioId;

            var peticion = await Http.Put<UsuarioCambiarRol>($"api/cuentas/CambiarRol", UsuarioCambiarRol);

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible cambiar el rol del usuario");
            }
            else
            {
                await Registro.Generar(_responsableEmail, $"Cambió el rol del usuario con nombre [{Usuario.Nombre}]");
                await Mensaje.Completado("El rol del usuario fue cambiado con éxito");
                Navigation.NavigateTo("/usuarios");
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}