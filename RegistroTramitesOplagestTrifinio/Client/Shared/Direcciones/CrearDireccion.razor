@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<div class="row">
    <div class="col-sm-4">
        <div class="form-group mb-3">
            <label for="direccion" class="form-label">Direcci&oacute;n del @Pertenencia</label>
            <BSInput InputType="InputType.Text" @bind-Value="@Direccion.Direccion" id="direccion" placeholder="Ingrese la direcci&oacute;n" />
            <BSFeedback For="@(() => Direccion.Direccion)" />
        </div>
    </div>
    <div class="col-sm-4">
        <div class="form-group mb-3">
            <label for="departamentos" class="form-label">Departamento del @Pertenencia</label>
            <BSInput InputType="InputType.Select" @bind-Value="@Direccion.Departamento">
                @if (Departamentos.Count == 0)
                {
                    <option value="">-- no hay departamentos --</option>
                }
                else
                {
                    <option value="" selected>-- seleccionar departamento --</option>

                    foreach (var departamento in Departamentos)
                    {
                        <option value="@departamento.Nombre">@departamento.Nombre</option>
                    }
                }
            </BSInput>
            <BSFeedback For="@(() => Direccion.Departamento)" />
        </div>
    </div>
    <div class="col-sm-4">
        <div class="form-group mb-3">
            <label for="municipios" class="form-label">Municipio del @Pertenencia</label>
            <BSInput InputType="InputType.Select" @bind-Value="@Direccion.Municipio">
                @if (Municipios.Count == 0)
                {
                    <option value="" selected>-- no hay municipios --</option>
                }
                else
                {
                    <option value="" selected>-- seleccionar municipio --</option>

                    foreach (var municipio in Municipios)
                    {
                        <option value="@municipio.Nombre">@municipio.Nombre</option>
                    }
                }
            </BSInput>
            <BSFeedback For="@(() => Direccion.Municipio)" />
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public DireccionDTO? Direccion { get; set; }

    [Parameter]
    public string? Pertenencia { get; set; }

    private List<DepartamentoDTO>? Departamentos { get; set; } = new()
    {
        new DepartamentoDTO { DepartamentoId = 2, Nombre = "Santa Ana"}
    };

    private List<MunicipioDTO> Municipios { get; set; } = new();

    private int _departamento = 0;
    private int _municipio = 0;

    protected override async Task OnInitializedAsync()
    {
        //await ObtenerDepartamentos();
        //await ObtenerMunicipios(Direccion.Municipio.Departamento.DepartamentoId);
        await ObtenerMunicipios();
    }

    private async Task ObtenerMunicipios(int departamentoId = 2)
    {
        try
        {
            var peticion = await Http.Get<List<MunicipioDTO>>($"api/tramites/municipios/{departamentoId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de municipios");
            }
            else
            {
                Municipios = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    //private async Task ObtenerDepartamentos()
    //{
    //    try
    //    {
    //        var peticion = await Http.Get<List<DepartamentoDTO>>("api/tramites/departamentos");

    //        if (peticion.Error)
    //        {
    //            await Mensaje.Error("No fue posible obtener la lista de departamentos");
    //        }
    //        else
    //        {
    //            Departamentos = peticion.Respuesta;
    //        }
    //    }
    //    catch (Exception)
    //    {
    //        await Mensaje.Error("Ocurrio un error inesperado");
    //    }
    //}
}
