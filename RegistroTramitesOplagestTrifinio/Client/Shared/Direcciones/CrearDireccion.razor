@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<div class="row">
    <div class="col-sm-4">
        <div class="form-group mb-3">
            <label for="direccion" class="form-label">Direcci&oacute;n del @Pertenencia</label>
            <BSInput InputType="InputType.Text" @bind-Value="@Direccion.Direccion" id="direccion" placeholder="Ingrese la direcci&oacute;n" />
            <BSFeedback For="@(() => Direccion.Direccion)" />
        </div>
    </div>
    <div class="col-sm-4">
        <div class="form-group mb-3">
            <label for="departamentos" class="form-label">Departamento del @Pertenencia</label>
            <InputSelect Value="Direccion.Municipio.Departamento.DepartamentoId" ValueExpression="@(() => Direccion.Municipio.Departamento.DepartamentoId)" TValue="int" ValueChanged="@(async (int departamentoId) => { Direccion.Municipio.Departamento.DepartamentoId = departamentoId; await ObtenerMunicipios(departamentoId); })" class="form-select" id="departamentos">
                @if (Departamentos == null)
                {
                    <option value="null">Cargando...</option>
                }
                else if (Departamentos.Count == 0)
                {
                    <option value="null">No hay departamentos para mostrar</option>
                }
                else
                {

                    foreach (var departamento in Departamentos)
                    {
                        <option value="@departamento.DepartamentoId">@departamento.Nombre</option>
                    }

                    if (Direccion.Municipio.Departamento.DepartamentoId is 0)
                    {
                        <option value="null" selected>-- seleccionar --</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
    <div class="col-sm-4">
        <div class="form-group mb-3">
            <label for="municipios" class="form-label">Municipio del @Pertenencia</label>
            <BSInput InputType="InputType.Select" Value="Direccion.MunicipioId" TValue="int" id="municipios" ValueExpression="@(() => Direccion.MunicipioId)" ValueChanged="@((int municipioId) => Direccion.MunicipioId = municipioId)">
                @if (Municipios.Count == 0)
                {
                    <option value="0" selected>-- no hay municipios para mostrar --</option>
                }
                else
                {
                    foreach (var municipio in Municipios)
                    {
                        <option value="@municipio.MunicipioId">@municipio.Nombre</option>
                    }

                    if (Direccion.Municipio.MunicipioId is 0)
                    {
                        <option value="null" selected>-- seleccione un municipio --</option>
                    }
                }
            </BSInput>
            <BSFeedback For="@(() => Direccion.MunicipioId)" />
        </div>
        <p>@Direccion.MunicipioId</p>
    </div>
</div>

@code
{
    [Parameter]
    public DireccionDTO? Direccion { get; set; }

    [Parameter]
    public string? Pertenencia { get; set; }

    private List<DepartamentoDTO>? Departamentos { get; set; }
    private List<MunicipioDTO> Municipios { get; set; } = new();

    private int _departamento = 0;
    private int _municipio = 0;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerDepartamentos();
        await ObtenerMunicipios(Direccion.Municipio.Departamento.DepartamentoId);
    }

    private async Task ObtenerMunicipios(int departamentoId = 2)
    {
        try
        {
            var peticion = await Http.Get<List<MunicipioDTO>>($"api/tramites/municipios/{departamentoId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de municipios");
            }
            else
            {
                Municipios = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerDepartamentos()
    {
        try
        {
            var peticion = await Http.Get<List<DepartamentoDTO>>("api/tramites/departamentos");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de departamentos");
            }
            else
            {
                Departamentos = peticion.Respuesta;                
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}
