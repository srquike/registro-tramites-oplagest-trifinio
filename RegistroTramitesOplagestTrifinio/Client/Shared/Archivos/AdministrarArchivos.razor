@inject HttpClient Http
@inject IMostrarMensaje Mensaje
@inject IPeticionesHttp PHttp
@inject IJSRuntime JS

<div class="row">
    <div class="col">
        <h4 class="mb-3">Subir archivo</h4>
        <div class="form-group mb-3">
            <BSLabel>Tipo de archivo</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="@_tipoArchivoSeleccionado">
                <option value="0" selected>Informe de visita técnica</option>
                <option value="1">Resolución final del trámite</option>
                <option value="2">Informe técnico y lista de asistencia</option>
            </BSInput>
        </div>
        <div>
            <label for="visita" class="form-label">Seleccionar archivo</label>
            <InputFile OnChange="OnFileChange" class="form-control" accept=".pdf" />
        </div>
    </div>
    <div class="col">
        <h4 class="mb-3">Descargar archivos</h4>
        <div class="table-responsive-sm">
            <table class="table table-hover table-bordered rounded align-middle">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Nombre</th>
                        <th scope="col">Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Archivos is null)
                    {
                        <div class="d-flex align-items-center">
                            <img src="images/progress.gif" width="35"/>
                            <p class="m-0">Cargando lista de archivos, por favor espere...</p>
                        </div>
                    }
                    else if (Archivos.Count is 0)
                    {
                        <div class="d-flex align-items-center">
                            <img src="images/progress.gif" />
                            <p class="m-0">No hay archivos disponibles</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var archivo in Archivos)
                        {
                            <tr>
                                <th scope="row">@(++_correlativo)</th>
                                <td>@archivo</td>
                                <td>
                                    <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                        <BSButton OnClick="@(async () => await DescargarArchivo(archivo))" Color="BSColor.Info" IsOutlined="true">Descargar</BSButton>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code 
{
    [Parameter]
    public string? Expediente { get; set; }

    private string _tipoArchivoSeleccionado = "0";
    private int _correlativo = 0;

    private List<string>? Archivos { get; set; }

    private async void OnFileChange(InputFileChangeEventArgs e)
    {
        var maxFileSize = 1024 * 150; // 15 MB
        var upload = false;

        using (var content = new MultipartFormDataContent())
        {
            foreach (var file in e.GetMultipleFiles(1))
            {
                try
                {
                    var nombreArchivo = _tipoArchivoSeleccionado switch
                    {
                        "0" => $"{Expediente}_informe_visita_tecnica.pdf",
                        "1" => $"{Expediente}_resolucion_final.pdf",
                        "2" => $"{Expediente}_informe_tecnico.pdf",
                        _ => $"{Expediente}_sin_tipo"
                    };

                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                    content.Add(content: fileContent, name: "\"files\"", fileName: nombreArchivo);

                    upload = true;
                }
                catch (Exception ex)
                {
                    await Mensaje.Error($"No fue posible cargar el archivo: {ex.Message}");
                }
            }

            if (upload)
            {
                try
                {
                    var peticion = await Http.PostAsync($"api/archivos/subir/{Expediente}", content);

                    if (peticion.IsSuccessStatusCode)
                    {
                        //await Mensaje.Completado("El archivo fue subido con éxito");
                        await ObtenerListaArchivos();
                        StateHasChanged();
                    }
                    else
                    {
                        await Mensaje.Error(peticion.RequestMessage.ToString());
                    }
                }
                catch (Exception)
                {
                    await Mensaje.Error("Ocurrio un error inesperado");
                }
            }
        }
    }

    protected override bool ShouldRender()
    {
        _correlativo = 0;
        return base.ShouldRender();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Expediente is not null)
        {
            await ObtenerListaArchivos();
        }
    }

    private async Task ObtenerListaArchivos()
    {
        try
        {
            var peticion = await PHttp.Get<List<string>>($"api/archivos/todos/{Expediente}");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Archivos = peticion.Respuesta;
            }
        }
        catch (Exception ex)
        {
            await Mensaje.Error("Ocurrio un error inesperado" + ex.Message);
        }
    }

    private async Task DescargarArchivo(string nombre)
    {
        //await Mensaje.Completado("descargando archivo: " + nombre);
        try
        {
            var peticion = await Http.GetAsync($"api/archivos/descargar/{Expediente}/{nombre}");

            if (!peticion.IsSuccessStatusCode)
            {
                await Mensaje.Error(peticion.RequestMessage.ToString());
            }
            else
            {
                var fileStream = await peticion.Content.ReadAsStreamAsync();
                using var streamReference = new DotNetStreamReference(stream: fileStream);
                await JS.InvokeVoidAsync("downloadFileFromStream", nombre, streamReference);
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}
