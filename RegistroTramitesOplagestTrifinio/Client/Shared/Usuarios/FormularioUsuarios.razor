@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<EditForm Model="Usuario" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />
    <div class="form-group row mb-3">
        <label for="nombre" class="col-sm-2 col-form-label">Nombre</label>
        <div class="col-sm-5">
            <InputText @bind-Value="@Usuario.Nombre" id="nombre" placeholder="Ingrese el nombre del usuario" class="form-control"></InputText>
            <ValidationMessage For="@(() => Usuario.Nombre)" />
        </div>
    </div>

    <div class="form-group row mb-3">
        <label for="correo" class="col-sm-2 col-form-label">Correo electr&oacute;nico</label>
        <div class="col-sm-5">
            <InputText @bind-Value="@Usuario.CorreoElectronico" id="correo" type="email" placeholder="Ingrese el correo electrónico del usuario" class="form-control"></InputText>
            <ValidationMessage For="@(() => Usuario.CorreoElectronico)" />
        </div>
    </div>

    <div class="form-group row mb-3">
        <div class="col-sm-2">Activar</div>
        <div class="col-sm-5">
            <div class="form-check">
                <InputCheckbox @bind-Value="@Usuario.Activo" id="activar_usuario" class="form-check-input"></InputCheckbox>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-success">Guardar</button>
</EditForm>

@code {
    [Parameter] public UsuarioFormularioDTO? Usuario { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private async Task OnDataAnnotationsValidated()
    {
        await OnValidSubmit.InvokeAsync();
    }
}