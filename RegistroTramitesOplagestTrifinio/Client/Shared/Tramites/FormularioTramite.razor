@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<EditForm  Model="Tramite" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />
    <button type="submit" class="btn btn-success mb-3">Guardar</button>
    <div class="row mb-3">
        <div class="col-sm-4">
            <div class="form-group">
                <label for="expediente" class="form-label">Expediente</label>
                <InputText @bind-Value="@Tramite.Expediente" id="expediente" placeholder="Ingrese el n&uacute;mero de expediente" class="form-control"></InputText>
                <ValidationMessage For="@(() => Tramite.Expediente)" />
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-sm-4">
            <div class="form-group">
                <label for="propietario" class="form-label">Propietario</label>
                <InputText @bind-Value="@Tramite.Propietario" id="propietario" placeholder="Ingrese el nombre del propietario" class="form-control"></InputText>
                <ValidationMessage For="@(() => Tramite.Propietario)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="proyecto" class="form-label">Proyecto</label>
                <InputText @bind-Value="@Tramite.Proyecto" id="proyecto" placeholder="Ingrese el nombre del proyecto" class="form-control"></InputText>
                <ValidationMessage For="@(() => Tramite.Proyecto)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="telefono" class="form-label">Tel&eacute;fono</label>
                <InputText @bind-Value="@Tramite.Telefono" id="telefono" placeholder="Ingrese el n&uacute;mero de tel&eacute;fono" class="form-control"></InputText>
                <ValidationMessage For="@(() => Tramite.Telefono)" />
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-sm-4">
            <div class="form-group">
                <label for="direccion" class="form-label">Direcci&oacute;n</label>
                <InputText @bind-Value="@Tramite.Direccion.Direccion" id="direccion" placeholder="Ingrese la direcci&oacute;n" class="form-control"></InputText>
                <ValidationMessage For="@(() => Tramite.Direccion)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="departamentos" class="form-label">Departamento</label>
                <InputSelect Value="@Tramite.Direccion.Municipio.DepartamentoId" TValue="int?" ValueExpression="@(() => Tramite.Direccion.Municipio.DepartamentoId)" ValueChanged="((int? valor) => ObtenerMunicipios(valor))" id="departamentos" class="form-select">
                    @if (Departamentos.Count == 0 || Departamentos == null)
                    {
                        <option value="null">Cargando...</option>
                    }
                    else
                    {
                        foreach (var departamento in Departamentos)
                        {
                            <option value="@departamento.DepartamentoId">@departamento.Nombre</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Tramite.Direccion.Municipio.DepartamentoId)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="municipios" class="form-label">Municipio</label>
                <InputSelect @bind-Value="Tramite.Direccion.Municipio.MunicipioId" id="municipios" class="form-select">
                    @if (Municipios.Count == 0 || Municipios == null)
                    {
                        <option value="null">Cargando...</option>
                    }
                    else
                    {
                        foreach (var municipio in Municipios)
                        {
                            <option value="@municipio.MunicipioId">@municipio.Nombre</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Tramite.Direccion.Municipio.MunicipioId)" />
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public FormularioTramiteDTO Tramite { get; set; } = new();
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private List<DepartamentoDTO> Departamentos { get; set; } = new();
    private List<MunicipioDTO> Municipios { get; set; } = new();
    private bool HabilitarMunicipios { get; set; } = new();
    private bool Actualizar { get; set; } = new();

    private async Task OnDataAnnotationsValidated()
    {
        await OnValidSubmit.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var peticion = await Http.Get<List<DepartamentoDTO>>("api/tramites/departamentos");

        if (peticion.Error)
        {
            await Mensaje.Error("No fue posible obtener la lista de departamentos");
        }
        else
        {
            Departamentos = peticion.Respuesta;
            await ObtenerMunicipios();
        }
    }

    protected override bool ShouldRender() => Actualizar;

    private async Task ObtenerMunicipios(int? departamentoId = 2)
    {
        var peticion = await Http.Get<List<MunicipioDTO>>($"api/tramites/municipios/{departamentoId}");

        if (peticion.Error)
        {
            await Mensaje.Error("No fue posible obtener la lista de municipios");
        }
        else
        {
            Municipios = peticion.Respuesta;
            Actualizar = true;
        }
    }
}