@using RegistroTramitesOplagestTrifinio.Client.Shared.Direcciones
@using RegistroTramitesOplagestTrifinio.Client.Shared.Proyectos
@using RegistroTramitesOplagestTrifinio.Shared.DTOs.Inmuebles;
@using RegistroTramitesOplagestTrifinio.Shared.DTOs.Proyectos;

@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<EditForm Model="Tramite" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />

    @if (Opciones is not null)
    {
        <div class="mb-4 btn-group" aria-label="group">
            @Opciones
        </div>
    }

    <h4>Datos del tr&aacute;mite</h4>

    @if (Extras is not null)
    {
        @Extras
    }

    <div class="row mb-3">
        <div class="col-sm-6">
            <div class="form-group">
                <label for="expediente" class="form-label">C&oacute;digo de expediente</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Expediente" id="expediente" placeholder="Ingrese el c&oacute;digo de expediente" />
                <BSFeedback For="@(() => Tramite.Expediente)" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label for="expediente-receptor" class="form-label">Receptor</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Receptor" id="expediente-receptor" placeholder="Ingrese el nombre del receptor" />
                <BSFeedback For="@(() => Tramite.Receptor)" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-sm-6">
            <div class="form-group">
                <label for="fecha-ingreso" class="form-label">Fecha de ingreso</label>
                <BSInput InputType="InputType.Date" @bind-Value="@Tramite.FechaIngreso" id="fecha-ingreso" placeholder="Ingrese la fecha de ingreso" />
                <BSFeedback For="@(() => Tramite.FechaIngreso)" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label for="fecha-egreso" class="form-label">Fecha de finalizaci&oacute;n (aprox.)</label>
                <BSInput InputType="InputType.Date" @bind-Value="@Tramite.FechaEgreso" id="fecha-egreso" placeholder="Ingrese la fecha de egreso" />
                <BSFeedback For="@(() => Tramite.FechaEgreso)" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <h4>Datos del inmueble y proyecto</h4>
        <div class="col-sm-12 d-flex align-items-end">
            <div class="form-group">
                <label for="inmuebles" class="form-label">Inmuebles</label>
                <BSInput InputType="InputType.Select" Value="Tramite.InmuebleId" ValueExpression="@(() => Tramite.InmuebleId)" TValue="int?" ValueChanged="@((int? inmuebleId) => Tramite.InmuebleId = inmuebleId)" id="inmuebles">
                    @if (Inmuebles == null)
                    {
                        <option value="null">Cargando...</option>
                    }
                    else if (Inmuebles.Count == 0)
                    {
                        <option value="null">No hay inmuebles para mostrar</option>
                    }
                    else
                    {
                        foreach (var inmueble in Inmuebles)
                        {
                            <option value="@inmueble.InmuebleId">@inmueble.Direccion.Direccion (@inmueble.Propietario.Nombre)</option>
                        }

                        <option value="null" selected>-- seleccione un inmueble --</option>
                    }
                </BSInput>
                <BSFeedback For="@(() => Tramite.InmuebleId)" />
            </div>
            <p class="ms-3"><i>*O ingrese los datos del nuevo inmueble a continuaci&oacute;n y haga click en el bot&oacute;n [Registrar nuevo inmueble]</i></p>
        </div>
    </div>
</EditForm>

<div class="accordion" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Registrar nuevo inmueble
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <BSForm Model="Inmueble" OnValidSubmit="NuevoInmueble">
                    <DataAnnotationsValidator />
                    <div class="row mb-3">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label for="area" class="form-label">&Aacute;rea (m&sup2;)</label>
                                <BSInput InputType="InputType.Text" @bind-Value="@Inmueble.Area" id="area" placeholder="Ingrese el &aacute;rea del inmueble" />
                                <BSFeedback For="@(() => Inmueble.Area)" />
                            </div>
                        </div>
                        <div class="col-sm-6 d-flex align-items-end">
                            <div class="form-group">
                                <label for="proyectos" class="form-label">Proyectos</label>
                                <BSInput InputType="InputType.Select" Value="Inmueble.ProyectoId" ValueExpression="@(() => Inmueble.ProyectoId)" TValue="int?" ValueChanged="@((int? proyectoId) => Inmueble.ProyectoId = proyectoId)" id="proyectos">
                                    @if (Proyectos == null)
                                    {
                                        <option value="null">Cargando...</option>
                                    }
                                    else if (Proyectos.Count == 0)
                                    {
                                        <option value="null">No hay proyectos para mostrar</option>
                                    }
                                    else
                                    {
                                        foreach (var proyecto in Proyectos)
                                        {
                                            <option value="@proyecto.ProyectoId">@proyecto.Nombre</option>
                                        }

                                        <option value="null" selected>-- seleccione un proyecto --</option>
                                    }
                                </BSInput>
                                <BSFeedback For="@(() => Inmueble.ProyectoId)" />
                            </div>
                            <div class="ms-3">
                                <BSButton Color="BSColor.Success" Target="CrearProyectoModal">Agregar proyecto</BSButton>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <CrearDireccion Direccion="Inmueble.Direccion" />
                    </div>

                    <div class="row mb-3">
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="propietario-nombre" class="form-label">Propietario</label>
                                <BSInput InputType="InputType.Text" @bind-Value="@Inmueble.Propietario.Nombre" id="propietario-nombre" placeholder="Ingrese el nombre del propietario" />
                                <BSFeedback For="@(() => Inmueble.Propietario.Nombre)" />
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="propietario-telefono" class="form-label">Tel&eacute;fono</label>
                                <BSInput InputType="InputType.Text" @bind-Value="@Inmueble.Propietario.Telefono" id="propietario-telefono" placeholder="Ingrese el tel&eacute;fono del propietario" />
                                <BSFeedback For="@(() => Inmueble.Propietario.Telefono)" />
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="propietario-email" class="form-label">Correo electr&oacute;nico</label>
                                <BSInput InputType="InputType.Text" @bind-Value="@Inmueble.Propietario.CorreoElectronico" id="propietario-email" placeholder="Ingrese el correo electr&oacute;nico del propietario" />
                                <BSFeedback For="@(() => Inmueble.Propietario.CorreoElectronico)" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <CrearDireccion Direccion="Inmueble.Propietario.Direccion" />
                    </div>

                    <div class="row mb-3">
                        <div class="col-sm-4">
                            <BSButton IsSubmit="true" Color="BSColor.Success">Registrar nuevo inmueble</BSButton>
                        </div>
                    </div>
                </BSForm>
            </div>
        </div>
    </div>
</div>



<BSModal IsCentered="true" HideOnValidSubmit="true" DataId="CrearProyectoModal">
    <CrearProyecto Proyecto="Proyecto" OnValidSubmit="NuevoProyecto" />
</BSModal>

@code
{
    [Parameter]
    public FormularioTramiteDTO? Tramite { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [Parameter]
    public RenderFragment? Opciones { get; set; }
    [Parameter]
    public RenderFragment? Extras { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    private List<InmuebleDTO>? Inmuebles { get; set; }
    private List<ProyectoDTO>? Proyectos { get; set; }

    private InmuebleDTO Inmueble { get; set; } = new();
    public ProyectoDTO Proyecto { get; set; } = new();

    private async Task OnDataAnnotationsValidated()
    {
        await OnValidSubmit.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerInmuebles();
        await ObtenerProyectos();
    }

    protected override async Task OnParametersSetAsync()
    {
        var autenticacion = await Authentication;
        var usuario = autenticacion.User.Identity;

        Tramite.Receptor = usuario.Name;
        Tramite.FechaIngreso = DateOnly.FromDateTime(DateTime.Today);
        Tramite.FechaEgreso = DateOnly.FromDateTime(DateTime.Today.AddDays(20));
    }

    private async Task NuevoInmueble()
    {
        try
        {
            var peticion = await Http.Post<InmuebleDTO, int>("api/inmuebles", Inmueble);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Tramite.InmuebleId = peticion.Respuesta;
                await Mensaje.Completado("Registro de nuevo inmueble realizado con éxito");
                await ObtenerInmuebles();
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerInmuebles()
    {
        try
        {
            var peticion = await Http.Get<List<InmuebleDTO>>("api/inmuebles");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Inmuebles = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerProyectos()
    {
        try
        {
            var peticion = await Http.Get<List<ProyectoDTO>>("api/proyectos");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de proyectos");
            }
            else
            {
                Proyectos = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task NuevoProyecto()
    {
        try
        {
            var peticion = await Http.Post<ProyectoDTO, int>("api/proyectos/create", Proyecto);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Inmueble.ProyectoId = peticion.Respuesta;
                await Mensaje.Completado("Registro de nuevo proyecto realizado con éxito");
                await ObtenerProyectos();
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}