@using RegistroTramitesOplagestTrifinio.Client.Shared.Direcciones
@using RegistroTramitesOplagestTrifinio.Client.Shared.Inmuebles
@using RegistroTramitesOplagestTrifinio.Client.Shared.Proyectos
@using RegistroTramitesOplagestTrifinio.Shared.DTOs.Inmuebles;
@using RegistroTramitesOplagestTrifinio.Shared.DTOs.Proyectos;

@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<EditForm Model="Tramite" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />

    @if (Opciones is not null)
    {
        <div class="mb-4 btn-group" aria-label="group">
            @Opciones
        </div>
    }

    <h4>Datos del tr&aacute;mite</h4>

    @if (Extras is not null)
    {
        @Extras
    }

    <div class="row mb-3">
        <div class="col-sm-4">
            <div class="form-group">
                <label for="expediente" class="form-label">C&oacute;digo de expediente</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Expediente" id="expediente" placeholder="Ingrese el c&oacute;digo de expediente" />
                <BSFeedback For="@(() => Tramite.Expediente)" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-sm-6">
            <div class="form-group">
                <label for="fecha-ingreso" class="form-label">Fecha de ingreso</label>
                <BSInput InputType="InputType.Date" TValue="DateOnly" Value="Tramite.FechaIngreso" ValueExpression="(() => Tramite.FechaIngreso)" ValueChanged="((DateOnly fechaIngreso) => { Tramite.FechaIngreso = fechaIngreso; ObtenerFechaEgreso(fechaIngreso); })" id="fecha-ingreso" />
                <BSFeedback For="@(() => Tramite.FechaIngreso)" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label for="fecha-egreso" class="form-label">Fecha de finalizaci&oacute;n (aprox.)</label>
                <BSInput InputType="InputType.Date" @bind-Value="@Tramite.FechaEgreso" id="fecha-egreso" />
                <BSFeedback For="@(() => Tramite.FechaEgreso)" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <h4>Datos del inmueble y proyecto</h4>
        <div class="col-sm-12 d-flex align-items-end">
            <div class="form-group">
                <label for="inmuebles" class="form-label">Inmuebles</label>
                <BSInput InputType="InputType.Select" Value="Tramite.InmuebleId" ValueExpression="@(() => Tramite.InmuebleId)" TValue="int?" ValueChanged="@((int? inmuebleId) => Tramite.InmuebleId = inmuebleId)" id="inmuebles">
                    @if (Inmuebles == null)
                    {
                        <option value="null">Cargando...</option>
                    }
                    else if (Inmuebles.Count == 0)
                    {
                        <option value="null">No hay inmuebles para mostrar</option>
                    }
                    else
                    {
                        foreach (var inmueble in Inmuebles)
                        {
                            <option value="@inmueble.InmuebleId">@inmueble.Direccion.Direccion (@inmueble.Propietario.Nombre)</option>
                        }

                        if (Tramite.InmuebleId == 0 || Tramite.InmuebleId == null)
                        {
                            <option value="null" selected>-- seleccione un inmueble --</option>
                        }
                    }
                </BSInput>
                <BSFeedback For="@(() => Tramite.InmuebleId)" />
            </div>
            <div class="ms-4">
                <BSButton Color="BSColor.Success" IsOutlined="true" OnClick="async () => await CrearInmuebleModal.ShowAsync()">Registrar nuevo inmueble</BSButton>
            </div>
        </div>
    </div>
</EditForm>

<BSModal Size="Size.ExtraLarge" IsCentered="true" HideOnValidSubmit="true" DataId="CrearInmuebleModal" @ref="@CrearInmuebleModal">
    <RegistrarInmueble Callback="NuevoInmueble" />
</BSModal>

@code
{
    [Parameter]
    public FormularioTramiteDTO? Tramite { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [Parameter]
    public RenderFragment? Opciones { get; set; }
    [Parameter]
    public RenderFragment? Extras { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState>? Authentication { get; set; }

    private List<InmuebleDTO>? Inmuebles { get; set; }
    private BSModal? CrearInmuebleModal { get; set; }

    private async Task OnDataAnnotationsValidated()
    {
        await OnValidSubmit.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerInmuebles();
        ObtenerFechaEgreso(DateOnly.FromDateTime(DateTime.Today));

    }

    protected override async Task OnParametersSetAsync()
    {
        var autenticacion = await Authentication;
        var usuario = autenticacion.User.Identity;

        Tramite.Receptor = usuario.Name;
    }

    private void ObtenerFechaEgreso(DateOnly fechaIngreso)
    {
        var dias = 0;
        var fechaInicio = fechaIngreso;

        while (dias != 20)
        {
            if (fechaInicio.DayOfWeek != DayOfWeek.Saturday && fechaInicio.DayOfWeek != DayOfWeek.Sunday)
            {
                Console.WriteLine(fechaInicio + " No es fin de semana");
                dias++;
            }

            fechaInicio = fechaInicio.AddDays(1);
        }

        Tramite.FechaEgreso = fechaInicio.AddDays(-1);
    }

    private async Task NuevoInmueble(InmuebleDTO inmueble)
    {
        try
        {
            var peticion = await Http.Post<InmuebleDTO, int>("api/inmuebles", inmueble);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Tramite.InmuebleId = peticion.Respuesta;
                await Mensaje.Completado("Registro de nuevo inmueble realizado con éxito");
                await ObtenerInmuebles();
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerInmuebles()
    {
        try
        {
            var peticion = await Http.Get<List<InmuebleDTO>>("api/inmuebles");

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Inmuebles = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}