@using RegistroTramitesOplagestTrifinio.Client.Shared.Proyectos
@using RegistroTramitesOplagestTrifinio.Shared.DTOs.Proyectos;
@inject IPeticionesHttp Http
@inject IMostrarMensaje Mensaje

<EditForm Model="Tramite" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />

    @if (Opciones is not null)
    {
        <div class="mb-4 btn-group" aria-label="group">
            @Opciones
        </div>
    }

    <h4>Datos del tr&aacute;mite</h4>

    @if (Extras is not null)
    {
        @Extras
    }

    <div class="row mb-3">
        <div class="col-sm-4">
            <div class="form-group">
                <label for="expediente" class="form-label">C&oacute;digo de expediente</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Expediente" id="expediente" placeholder="Ingrese el c&oacute;digo de expediente" />
                <BSFeedback For="@(() => Tramite.Expediente)" />
            </div>
        </div>
    </div>


    <div class="row mb-3">
        <h4>Datos del inmueble</h4>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="direccion" class="form-label">Direcci&oacute;n</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Inmueble.Direccion.Direccion" id="direccion" placeholder="Ingrese la direcci&oacute;n del inmueble" />
                <BSFeedback For="@(() => Tramite.Inmueble.Direccion.Direccion)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="departamentos" class="form-label">Departamento</label>
                <InputSelect Value="_departamento" ValueExpression="@(() => _departamento)" TValue="int" ValueChanged="@(async (int departamentoId) => { _departamento = departamentoId; await ObtenerMunicipios(departamentoId); })" class="form-select" id="departamentos">
                    @if (Departamentos == null)
                    {
                        <option value="null">Cargando...</option>
                    }
                    else if (Departamentos.Count == 0)
                    {
                        <option value="null">No hay municipios para mostrar</option>
                    }
                    else
                    {
                        foreach (var departamento in Departamentos)
                        {
                            <option value="@departamento.DepartamentoId">@departamento.Nombre</option>
                        }

                        <option value="null" selected>-- seleccionar --</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="municipios" class="form-label">Municipio</label>
                <BSInput InputType="InputType.Select" Value="@Tramite.Inmueble.Direccion.MunicipioId" TValue="int?" id="municipios" ValueExpression="@(() => Tramite.Inmueble.Direccion.MunicipioId)" ValueChanged="@((int? municipioId) => Tramite.Inmueble.Direccion.MunicipioId = municipioId)">
                    @if(Municipios.Count == 0)
                    {
                        <option value="null">-- no hay municipios para mostrar --</option>
                    }
                    else
                    {
                        foreach (var municipio in Municipios)
                        {
                            <option value="@municipio.MunicipioId">@municipio.Nombre</option>
                        }

                        <option value="null" selected>-- seleccione un municipio --</option>
                    }
                </BSInput>
                <BSFeedback For="@(() => Tramite.Inmueble.Direccion.MunicipioId)" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-sm-4">
            <div class="form-group">
                <label for="propietario-nombre" class="form-label">Propietario</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Inmueble.Propietario.Nombre" id="propietario-nombre" placeholder="Ingrese el nombre del propietario" />
                <BSFeedback For="@(() => Tramite.Inmueble.Propietario.Nombre)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="propietario-telefono" class="form-label">Tel&eacute;fono</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Inmueble.Propietario.Telefono" id="propietario-telefono" placeholder="Ingrese el tel&eacute;fono del propietario" />
                <BSFeedback For="@(() => Tramite.Inmueble.Propietario.Telefono)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label for="propietario-email" class="form-label">Correo electr&oacute;nico</label>
                <BSInput InputType="InputType.Text" @bind-Value="@Tramite.Inmueble.Propietario.CorreoElectronico" id="propietario-email" placeholder="Ingrese el correo electr&oacute;nico del propietario" />
                <BSFeedback For="@(() => Tramite.Inmueble.Propietario.CorreoElectronico)" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <h4>Datos del proyecto</h4>
        <div class="col-sm-4 d-flex align-items-end">
            <div class="form-group">
                <label for="proyectos" class="form-label">Proyectos</label>
                <BSInput InputType="InputType.Select" Value="Tramite.ProyectoId" ValueExpression="@(() => Tramite.ProyectoId)" TValue="int?" ValueChanged="@((int? proyectoId) => Tramite.ProyectoId = proyectoId)" id="proyectos">
                    @if (Proyectos == null)
                    {
                        <option value="null">Cargando...</option>
                    }
                    else if (Proyectos.Count == 0)
                    {
                        <option value="null">No hay proyectos para mostrar</option>
                    }
                    else
                    {
                        foreach (var proyecto in Proyectos)
                        {
                            <option value="@proyecto.ProyectoId">@proyecto.Nombre</option>
                        }

                        <option value="null" selected>-- seleccione un proyecto --</option>
                    }
                </BSInput>
                <BSFeedback For="@(() => Tramite.ProyectoId)" />
            </div>
            <div class="ms-3">
                <BSButton Color="BSColor.Success" Target="CrearProyectoModal">Nuevo proyecto</BSButton>
            </div>
        </div>
    </div>
</EditForm>

<BSModal IsCentered="true" HideOnValidSubmit="true" DataId="CrearProyectoModal">
    <CrearProyecto Proyecto="Proyecto" OnValidSubmit="NuevoProyecto" />
</BSModal>

@code
{
    [Parameter]
    public FormularioTramiteDTO? Tramite { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public RenderFragment? Opciones { get; set; }

    [Parameter]
    public RenderFragment? Extras { get; set; }

    private List<DepartamentoDTO>? Departamentos { get; set; }
    private List<MunicipioDTO> Municipios { get; set; } = new();
    private List<ProyectoDTO>? Proyectos { get; set; }
    private ProyectoDTO Proyecto { get; set; } = new();
    private int _departamento = 0;

    private async Task OnDataAnnotationsValidated()
    {
        await OnValidSubmit.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ObtenerDepartamentos();
            await ObtenerProyectos();
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerMunicipios(int departamentoId = 2)
    {
        try
        {
            var peticion = await Http.Get<List<MunicipioDTO>>($"api/tramites/municipios/{departamentoId}");

            if (peticion.Error)
            {
                await Mensaje.Error("No fue posible obtener la lista de municipios");
            }
            else
            {
                Municipios = peticion.Respuesta;
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }

    private async Task ObtenerProyectos()
    {
        var peticion = await Http.Get<List<ProyectoDTO>>("api/proyectos");

        if (peticion.Error)
        {
            await Mensaje.Error("No fue posible obtener la lista de proyectos");
        }
        else
        {
            Proyectos = peticion.Respuesta;
        }
    }

    private async Task ObtenerDepartamentos()
    {
        var peticion = await Http.Get<List<DepartamentoDTO>>("api/tramites/departamentos");

        if (peticion.Error)
        {
            await Mensaje.Error("No fue posible obtener la lista de departamentos");
        }
        else
        {
            Departamentos = peticion.Respuesta;
        }
    }

    private async Task NuevoProyecto()
    {
        try
        {
            var peticion = await Http.Post<ProyectoDTO, int>("api/proyectos/create", Proyecto);

            if (peticion.Error)
            {
                await Mensaje.Error(await peticion.ObtenerMensaje());
            }
            else
            {
                Tramite.ProyectoId = peticion.Respuesta;
                await Mensaje.Completado("Registro de nuevo proyecto realizado con éxito");
                await ObtenerProyectos();
            }
        }
        catch (Exception)
        {
            await Mensaje.Error("Ocurrio un error inesperado");
        }
    }
}